apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

version = '1.1.1-SNAPSHOT'
group = 'org.puredata.android'
archivesBaseName = 'pd-core'

dependencies {
    api 'com.noisepages.nettoyeur:midi:1.0.0-rc1'
    implementation 'com.noisepages.nettoyeur:midi:1.0.0-rc1'
    implementation "androidx.legacy:legacy-support-v4:" + rootProject.androidxLegacySupportVersion
}

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion 29
        versionCode 1
        versionName version
        externalNativeBuild {
            cmake {
                cppFlags "-std=c++14"
                arguments '-DANDROID_STL=c++_static'
                // armeabi and mips are deprecated in NDK r16 so we don't want to build for them
                abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            }
        }
    }

    sourceSets {
        main {
            java.srcDirs = ['src/main/java', 'src/main/jni/libpd/java']
            jni.srcDirs = [] //disable automatic ndk-build call
            res.srcDirs = ['src/main/res']
            assets.srcDirs = ['assets']
        }

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    externalNativeBuild {
        cmake {
            path 'src/main/jni/CMakeLists.txt'
        }
    }

    libraryVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = "${archivesBaseName}-${version}.aar"
        }
    }
}

def siteUrl = 'https://github.com/libpd/pd-for-android'
def gitUrl = 'https://github.com/libpd/pd-for-android.git'

install {
    repositories.mavenInstaller {

        pom {
            project {
                packaging 'aar'

                name 'Pure Data for Android'
                url siteUrl

                licenses {
                    license {
                        name 'BSD New'
                        url 'https://raw.githubusercontent.com/libpd/pd-for-android/master/PdCore/LICENSE.txt'
                    }
                }

                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl

                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

bintray {
    if (project.hasProperty("bintray.user") && project.hasProperty("bintray.apikey")) {
        user = project.property("bintray.user")
        key = project.property("bintray.apikey")
    } else {
        logger.info('Bintray user/apikey not found')
    }

    configurations = ['archives']
    pkg {
        repo = "maven"
        name = "pd-for-android"
        userOrg = 'pd-for-android'
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = ["BSD New"]
        publish = false
    }
}
